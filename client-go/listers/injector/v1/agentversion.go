/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/jd-opensource/joylive-injector/client-go/apis/injector/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AgentVersionLister helps list AgentVersions.
// All objects returned here must be treated as read-only.
type AgentVersionLister interface {
	// List lists all AgentVersions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.AgentVersion, err error)
	// AgentVersions returns an object that can list and get AgentVersions.
	AgentVersions(namespace string) AgentVersionNamespaceLister
	AgentVersionListerExpansion
}

// agentVersionLister implements the AgentVersionLister interface.
type agentVersionLister struct {
	indexer cache.Indexer
}

// NewAgentVersionLister returns a new AgentVersionLister.
func NewAgentVersionLister(indexer cache.Indexer) AgentVersionLister {
	return &agentVersionLister{indexer: indexer}
}

// List lists all AgentVersions in the indexer.
func (s *agentVersionLister) List(selector labels.Selector) (ret []*v1.AgentVersion, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AgentVersion))
	})
	return ret, err
}

// AgentVersions returns an object that can list and get AgentVersions.
func (s *agentVersionLister) AgentVersions(namespace string) AgentVersionNamespaceLister {
	return agentVersionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AgentVersionNamespaceLister helps list and get AgentVersions.
// All objects returned here must be treated as read-only.
type AgentVersionNamespaceLister interface {
	// List lists all AgentVersions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.AgentVersion, err error)
	// Get retrieves the AgentVersion from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.AgentVersion, error)
	AgentVersionNamespaceListerExpansion
}

// agentVersionNamespaceLister implements the AgentVersionNamespaceLister
// interface.
type agentVersionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AgentVersions in the indexer for a given namespace.
func (s agentVersionNamespaceLister) List(selector labels.Selector) (ret []*v1.AgentVersion, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AgentVersion))
	})
	return ret, err
}

// Get retrieves the AgentVersion from the indexer for a given namespace and name.
func (s agentVersionNamespaceLister) Get(name string) (*v1.AgentVersion, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("agentversion"), name)
	}
	return obj.(*v1.AgentVersion), nil
}
